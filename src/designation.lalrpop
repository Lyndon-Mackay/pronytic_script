use crate::designation::{BuildingLimit,DesignationData,
DesignationToken,Field,Housing,PlanetFilter,PopulationImpact};

use rust_decimal::prelude::*;
grammar;

extern {
    type Location = usize;
    type Error = String;

    enum DesignationToken {
        "true" => DesignationToken::True,
        "false" => DesignationToken::False,

        "string" => DesignationToken::String(<String>),
        "number" => DesignationToken::Number(<u8>),
        "decimal_number" => DesignationToken::DecimalNumber(<Decimal>),

        "=" => DesignationToken::Equal,
        "(" => DesignationToken::LeftBracket,
        ")" => DesignationToken::RightBracket,

        "[" => DesignationToken::LeftSquare,
        "]" => DesignationToken::RightSquare,

        "{" => DesignationToken::LeftCurly,
        "}" => DesignationToken::RightCurly,

        "name" => DesignationToken::Name,

        "description" => DesignationToken::Description,

        "building_limit" => DesignationToken::BuildingLimit,
        "unlimited" => DesignationToken::Unlimited,
        "limited" => DesignationToken::Limited,

        "population_impact" => DesignationToken::PopulationImpact,
        "growth" => DesignationToken::Growth,
        "min_population" => DesignationToken::MinPopulation,

        "housing" => DesignationToken::Housing,
        "managed" => DesignationToken::Managed,
        "unmanaged" => DesignationToken::Unmanaged,

        "orbital" => DesignationToken::Orbital,
        "all_orbitals" => DesignationToken::AllOrbitals,
        "all_planets" => DesignationToken::AllPlanets,        
        "planet_filters" => DesignationToken::PlanetFilters,
        "private_buildings" => DesignationToken::PrivateBuildings,
        
    }
}

pub DesignationData:Vec<DesignationData> = {
    <DesignationDatum*>
}

DesignationDatum:DesignationData = {
    <id:"string"> <fields:Field*> =>{
        let mut designation_data = DesignationData::default();

        designation_data.id = id;

        for f in fields{
            match f {
                Field::Name(n) => designation_data.name = n,
                Field::Description(d) => designation_data.description = d,
                Field::Housing(h) => designation_data.housing = h,
                Field::BuildingLimit(b) => designation_data.building_limit = b,
                Field::PopulationImpact(p) => designation_data.population_impact = p,
                Field::PlanetFilters(p) => designation_data.planet_filters = p,
                Field::PrivateBuildings(p) => designation_data.allow_private_buildings = p,
            }
        }

        designation_data

    }
}

Field:Field = {
    <n:Name> => Field::Name(n),
    <d:Description> => Field::Description(d),
    <h:Housing> => Field::Housing(h),
    <b:BuildingLimit> => Field::BuildingLimit(b),
    <p:PopulationImpact> => Field::PopulationImpact(p),
    <p:PrivateBuildings> => Field::PrivateBuildings(p),
}

BuildingLimit:BuildingLimit = {
    "building_limit" "=" "unlimited" => BuildingLimit::Unlimited,
    "building_limit" "=" "limited" "(" <n:"number"> ")" => BuildingLimit::Limited(n),
}

Housing:Housing = {
    "housing" "=" "managed" => Housing::Managed,
    "housing" "=" "unmanaged" => Housing::Unmanaged,
}

PopulationImpact:PopulationImpact = {
    "population_impact" "{" "growth" "=" <growth:"decimal_number">
    "min_population" "=" <min_population:"number"> "}" => {
        PopulationImpact{
            growth,
            min_population
        }
    }
}

PlanetFilters:Vec<PlanetFilter> = {
    "planet_filters" "=" "[" <planets:PlanetFilter+> "]" => planets,
}

PlanetFilter:PlanetFilter = {
    "orbital" "(" <planet:"string"> ")" => PlanetFilter::Orbital(planet),
    "all_orbitals" => PlanetFilter::AllOrbitals,
    "all_planets" => PlanetFilter::AllPlanets,
    <planet:"string"> => PlanetFilter::PlanetSide(planet),
}

Description:String = {
    "description" "=" <id:"string"> => id,
}

Name:String = {
    "name" "=" <id:"string"> => id,
}

PrivateBuildings:bool = {
    "private_buildings" "=" "true" => true,
    "private_buildings" "=" "false" => false,
}
