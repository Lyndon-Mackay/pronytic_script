use rust_decimal::Decimal;

use crate::augmentations::{AugmentationData,Effect,Field,AugmentationToken};

use crate::common::GoodConsumes;


grammar;

extern {
    type Location = usize;
    type Error = String;

	enum AugmentationToken {
        "string" => AugmentationToken::String(<String>),
        "number" => AugmentationToken::DecimalNumber(<Decimal>),

        "name" => AugmentationToken::Name,
        "icon" => AugmentationToken::Icon,

        "=" => AugmentationToken::Equal,
        ":" => AugmentationToken::Colon,

        "{" => AugmentationToken::LeftCurly,
        "}" => AugmentationToken::RightCurly,

        "[" => AugmentationToken::LeftSquare,
        "]" => AugmentationToken::RightSquare,

        "good_id" => AugmentationToken::GoodId,

        "amount" => AugmentationToken::Amount,
        
        "consumes" => AugmentationToken::Consumes,

		"effects" => AugmentationToken::Effects,

		"add_trait" => AugmentationToken::AddTrait,
		"remove_trait" => AugmentationToken::RemoveTrait,

		"star_adapt" => AugmentationToken::StarAdapt,
	}
	
}


pub Augmentations:Vec<AugmentationData> = {
	<list:Augmentation*> => list,
}

Augmentation:AugmentationData = {
	<id:Id> <fields:Field*> => {
        let mut name = "".to_string();
        let mut icon = "".to_string();
        let mut consumes = Vec::new();
        let mut effects = Vec::new();

        for f in fields.into_iter(){
            match f {
                Field::Name(n) => name = n,
                Field::Icon(i) => icon = i,
                Field::Consumes(c) => consumes = c,
                Field::Effects(e) => effects = e,
            }
        }

		AugmentationData {
			id,
			name,
			icon,
			consumes,
			effects,
		}
	}
}

Field:Field = {
    <n:Name> => Field::Name(n),
    <i:Icon> => Field::Icon(i),
    <c:Consumes> => Field::Consumes(c),
    <e:Effects> => Field::Effects(e),
}

Id:String = {
    "string"
}

Name:String = {
    "name" "=" <id:"string"> => id.trim_matches('"').to_string(),
}

Icon:String = {
    "icon" "=" <id:"string"> => id,
}

Consumes:Vec<GoodConsumes> = {
    "consumes" "=" "[" <c:SingleConsumes*>  "]" => c,
}

SingleConsumes:GoodConsumes = {
    "{" "good_id" ":" <id:"string"> "amount" ":" <n:"number">  "}" => {
        GoodConsumes {
            id,
            amount:n,
        }    
    }
}

Effects:Vec<Effect> = {
  "effects" "="  "{" <effect:Effect*> "}" => effect
}

Effect:Effect = {
	"star_adapt" => Effect::AdaptStarType,
	"add_trait" "=" <id:"string"> => Effect::AddTrait(id),
	"remove_trait" "=" <id:"string"> => Effect::RemoveTrait(id),
}
