use rust_decimal::Decimal;
use crate::asteroid_mining::{Field,AsteroidMiningData,AsteroidToken};

use crate::common::GoodConsumes;

grammar;

extern {
    type Location = usize;
    type Error = String;

    enum AsteroidToken{
        "string" => AsteroidToken::String(<String>),
        "number" => AsteroidToken::Number(<u8>),
        "decimal_number" => AsteroidToken::DecimalNumber(<Decimal>),

        "=" => AsteroidToken::Equal,
        ":" => AsteroidToken::Colon,

        "{" => AsteroidToken::LeftCurly,
        "}" => AsteroidToken::RightCurly,

        "[" => AsteroidToken::LeftSquare,
        "]" => AsteroidToken::RightSquare,

        "name" => AsteroidToken::Name,
        "depot_asset" => AsteroidToken::DepotAsset,
        "ship_asset" => AsteroidToken::ShipAsset,

        "good_id" => AsteroidToken::GoodId,

        "amount" => AsteroidToken::Amount,
        
        "consumes" => AsteroidToken::Consumes,
        "produces" => AsteroidToken::Produces,

        "power" => AsteroidToken::Power,

        "time" => AsteroidToken::Time,
        
    }
}

pub AsteroidMiningData:Vec<AsteroidMiningData> = {
    <list:AsteroidMiningDatum*> => list,
}

AsteroidMiningDatum:AsteroidMiningData = {
    <level:"number"> "=" "{" <fields:AsteroidField*>  "}" => {
        let mut asteroid_mine = AsteroidMiningData::default();
        asteroid_mine.level = level;

        for f in fields {
            match f {
                Field::Name(n) => asteroid_mine.name = n,
                Field::DepotAsset(n) => asteroid_mine.depot_asset = n,
                Field::ShipAsset(n) => asteroid_mine.ship_asset = n,
                Field::Consumes(c) => asteroid_mine.costs = c,
                Field::Produces(c) => asteroid_mine.produces = c,
                Field::Time(t) => asteroid_mine.time = t,
                Field::Power(p) => asteroid_mine.power = p,
            }
        }
        asteroid_mine
    }
}

AsteroidField:Field ={
    <n:Name> => Field::Name(n),
    <a:DepotAsset> => Field::DepotAsset(a),
    <a:ShipAsset> => Field::ShipAsset(a),
    <c:GoodConsumes> => Field::Consumes(c),
    <c:GoodProduces> => Field::Produces(c),
    <t:Time> => Field::Time(t),
    <p:Power> => Field::Power(p),
}

Name:String = {
    "name" "=" <s:"string"> => s,
}

DepotAsset:String = {
    "depot_asset" "=" <s:"string"> =>s,
}

ShipAsset:String = {
    "ship_asset" "=" <s:"string"> =>s,
}

Time:u8 = {
    "time" "=" <t:"number"> => t,
}

Power:Decimal = {
    "power" "=" <p:"decimal_number"> => p,
}

GoodProduces:Vec<GoodConsumes> = {
    "produces" "=" "[" <c:GoodConsume*> "]" =>c,
}
GoodConsumes:Vec<GoodConsumes> = {
    "consumes" "=" "[" <c:GoodConsume*> "]" =>c,
}

GoodConsume:GoodConsumes = {
    "{" "good_id" ":" <id:"string"> "amount" ":" <n:"decimal_number"> "}" => {
        GoodConsumes {
            id,
            amount:n,
        }
    }
}
