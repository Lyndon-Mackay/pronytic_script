use crate::goods::{ConsumptionType,Field,GoodData,GoodType,SurvivalConditions,SurvivalField,Token};
use rust_decimal::Decimal;


grammar;

extern {
    type Location = usize;
    type Error = String;

    enum Token {
        "=" => Token::Equal,
        "{" => Token::LeftCurly,
        "}" => Token::RightCurly,
        "string" => Token::String(<String>),
        "number" => Token::DecimalNumber(<Decimal>),
        "icon" => Token::Icon,
        "name" => Token::Name,
        "buy_value" => Token::BuyValue,
        "sell_value" => Token::SellValue,
        "good_type" => Token::GoodType,
        "public" => Token::Public,
        "private" => Token::Private,
        "tender" => Token::Tender,
        "hardcoded_id" => Token::HardcodedId,
        "consumption_type" => Token::ConsumptionType,

        "prosperity_bonus" => Token::ProsperityBonus,
        "prosperity_cost" => Token::ProsperityCost,

        "none" => Token::None,
        "amenity" => Token::Amenity,
        "survival" => Token::Survival,
        "essential" => Token::Essential,

        "magnetosphere" => Token::Magnetosphere,
        "atmosphere" => Token::Atmosphere,
        "temperature" => Token::Temperature,
        "water" => Token::Water,
        "breathability" => Token::Breathability,
    }
}

pub Goods:Vec<GoodData> = {
    Good*
}

Good:GoodData = {
    <id:"string"> <fields:Field*> =>{
        let mut hardcoded_id = None;
        let mut icon = String::new();
        let mut name = String::new();
        let mut good_type = GoodType::Public;
        let mut buy_value = Decimal::ZERO;
        let mut sell_value = Decimal::ZERO;
        let mut consumption_type = ConsumptionType::None;
        let mut prosperity_bonus = Decimal::ZERO;
        let mut prosperity_cost = Decimal::ZERO;
        for f in fields {
            match f{
                Field::Icon(i) => icon = i,
                Field::Name(n) => name = n,
                Field::BuyValue(b) => buy_value = b,
                Field::SellValue(s) => sell_value = s,
                Field::GoodType(g) => good_type = g,
                Field::HardcodedId(i) => hardcoded_id = Some(i),
                Field::ConsumptionType(c) => consumption_type = c,
                Field::ProsperityBonus(p) => prosperity_bonus = p,
                Field::ProsperityCost(p) => prosperity_cost = p,
            }
        }
        GoodData {
            id:id.to_string(),
            hardcoded_id,
            icon,
            name,
            good_type,
            consumption_type,
            buy_value,
            sell_value,
            prosperity_bonus,
            prosperity_cost,
        }
    }
}


Field: Field = {
    <i:Icon> => Field::Icon(i),
    <n:Name> => Field::Name(n),
    <b:BuyValue> => Field::BuyValue(b),
    <s:SellValue> => Field::BuyValue(s),
    <g:GoodType> => Field::GoodType(g),
    <h:HardcodedId> => Field::HardcodedId(h),
    <c:ConsumptionType> => Field::ConsumptionType(c),
    <p:ProsperityBonus> => Field::ProsperityBonus(p),
    <p:ProsperityCost> => Field::ProsperityCost(p),
}

SurvivalField:SurvivalField = {
    <m:Magnetosphere> => SurvivalField::Magnetosphere(m),
    <a:Atmosphere> => SurvivalField::Atmosphere(a),
    <t:Temperature> => SurvivalField::Temperature(t),
    <w:Water> => SurvivalField::Water(w),
    <b:Breathability> => SurvivalField::Breathability(b),
}

Icon:String ={
    "icon" "=" <s:"string"> => s.to_string(),
}

Name:String ={
    "name" "=" <s:"string"> => s.to_string(),
}

BuyValue:Decimal = {
    "buy_value" "=" <n:"number"> => n,
}

SellValue:Decimal = {
    "sell_value" "=" <n:"number"> => n,
}

ProsperityBonus:Decimal = {
    "prosperity_bonus" "=" <n:"number"> => n,
}

ProsperityCost:Decimal = {
    "prosperity_cost" "=" <n:"number"> => n,
}

GoodType:GoodType = {
    "good_type" "=" "public" => GoodType::Public,
    "good_type" "=" "private" => GoodType::Private,
    "good_type" "=" "tender" => GoodType::Tender,
}

Magnetosphere:Decimal = {
    "magnetosphere" "=" <n:"number"> => n,
}

Atmosphere:Decimal = {
    "atmosphere" "=" <n:"number"> => n,
}

Temperature:Decimal = {
    "temperature" "=" <n:"number"> => n,
}

Water:Decimal = {
    "water" "=" <n:"number"> => n,
}

Breathability:Decimal = {
    "breathability" "=" <n:"number"> => n,
}

HardcodedId:u8 = {
    "hardcoded_id" "=" <n:"number"> => n.try_into().unwrap(),
}

ConsumptionType:ConsumptionType = {
    "consumption_type" "=" "essential" => ConsumptionType::Essential,
    "consumption_type" "=" "amenity" => ConsumptionType::Amenity,
    "consumption_type" "=" "none" => ConsumptionType::None,
    "consumption_type" "=" "survival"
     "{" <fields:SurvivalField*> "}" => {
        let mut survival_conditions = SurvivalConditions::default();
        for f in fields{
            match f {
                SurvivalField::Magnetosphere(m) => survival_conditions.magnetosphere = Some(m),
                SurvivalField::Atmosphere(a) => survival_conditions.atmosphere = Some(a),
                SurvivalField::Temperature(t) => survival_conditions.temperature = Some(t),
                SurvivalField::Water(w) => survival_conditions.water = Some(w),
                SurvivalField::Breathability(b) => survival_conditions.breathability = Some(b),
            }
        } 
        assert_ne!(survival_conditions,SurvivalConditions::default()); 
        ConsumptionType::Survival(survival_conditions)
    } 
}
