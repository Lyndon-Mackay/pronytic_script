use rust_decimal::prelude::*;

use crate::orbital::{Field,OrbitalData,OrbitalToken,Temperature};

use crate::common::GoodConsumes;

grammar;

extern {
    type Location = usize;
    type Error = String;

    enum OrbitalToken{
        "string" => OrbitalToken::String(<String>),
        "number" => OrbitalToken::Number(<u8>),
        "decimal_number" => OrbitalToken::DecimalNumber(<Decimal>),

        "=" => OrbitalToken::Equal,
        ":" => OrbitalToken::Colon,

        "{" => OrbitalToken::LeftCurly,
        "}" => OrbitalToken::RightCurly,

        "[" => OrbitalToken::LeftSquare,
        "]" => OrbitalToken::RightSquare,

        "name" => OrbitalToken::Name,
        "asset_location" => OrbitalToken::AssetLocation,

        "good_id" => OrbitalToken::GoodId,

        "amount" => OrbitalToken::Amount,

        "consumes" => OrbitalToken::Consumes,

        "time" => OrbitalToken::Time,
        "building_limit" => OrbitalToken::BuildingLimit,

        "magnetophere" => OrbitalToken::Magnetosphere,
        "atmosphere" => OrbitalToken::Atmosphere,

        "temperature_celsius" => OrbitalToken::TemperatureCelsius,
        "temperature_kelvin" => OrbitalToken::TemperatureKelvin,

        "water" => OrbitalToken::Water,
        "breathability" => OrbitalToken::Breathability,
    }

}

pub OrbitalData:Vec<OrbitalData> = {
    <list:OrbitalDatum*> => list,
}

OrbitalDatum:OrbitalData = {
    <level:"number"> "=" "{" <fields:OrbitalField*> "}" => {
        let mut orbital = OrbitalData{
            level,
            ..Default::default()
        };
        for f in fields {
            match f {
                Field::Name(n) => orbital.name = n,
                Field::AssetLocation(a) => orbital.asset_location = a,
                Field::Consumes(c) => orbital.costs = c,
                Field::Time(t) => orbital.time = t,
                Field::BuildingLimit(l) => orbital.building_limit = l,
                Field::Magnetosphere(m) => orbital.magnetosphere = m,
                Field::Atmosphere(a) => orbital.atmosphere = a,
                Field::Water(w) => orbital.water = w,
                Field::Temperature(t) => orbital.temperature = t,
                Field::Breathability(b) => orbital.breathability = b,
            }
        }
        orbital
    }
}

OrbitalField:Field ={
    <n:Name> => Field::Name(n),
    <a:AssetLocation> => Field::AssetLocation(a),
    <c:GoodConsumes> => Field::Consumes(c),
    <t:Time> => Field::Time(t),
    <l:BuildingLimit> => Field::BuildingLimit(l),
    <m:Magnetosphere> => Field::Magnetosphere(m),
    <a:Atmosphere> => Field::Atmosphere(a),
    <w:Water> => Field::Water(w),
    <t:Temperature> => Field::Temperature(t),
    <b:Breathability> => Field::Breathability(b),
}
Name:String = {
    "name" "=" <s:"string"> => s,
}

AssetLocation:String = {
    "asset_location" "=" <s:"string"> => s,
}

Time:u8 = {
    "time" "=" <t:"number"> => t,
}

BuildingLimit:u8 = {
    "building_limit" "=" <l:"number"> => l,
}

Atmosphere:Decimal = {
    "atmosphere" "=" <d:"decimal_number"> => d,
}

Water:Decimal = {
    "water" "=" <d:"decimal_number"> => d,
}

Magnetosphere:Decimal = {
    "magnetophere" "=" <m:"decimal_number"> => m,
}

Breathability:Decimal = {
    "breathability" "=" <d:"decimal_number"> => d,
}

Temperature:Temperature = {
    "temperature_kelvin" "=" <d:"decimal_number"> => Temperature::from_kelvin(d),
    "temperature_celsius" "=" <d:"decimal_number"> => Temperature::from_celsius(d),
}

GoodConsumes:Vec<GoodConsumes> = {
    "consumes" "=" "[" <c:GoodConsume*> "]" =>c,
}

GoodConsume:GoodConsumes = {
    "{" "good_id" ":" <id:"string"> "amount" ":" <n:"decimal_number"> "}" => {
        GoodConsumes {
            id,
            amount:n,
        }
    }
}
